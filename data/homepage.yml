# introduction
introduction:
    title: "TestAndSet"
    text: "With TestAndSet you can handle custom web-based mutexes from the TestAndSet API. Mutexes can be integrated in your scripts, whereever you need them."

# banner-feature
featureDescription:
  - title: "API"
    description: "We provide a service where you can handle atomic operations in distributed environments. You don't need to setup your own locking tool. Our API provides simple endpoints for creating your mutex with your own key for a small amount of time, refreshing the mutex when the work isn't done yet or unlocking it when you are done."

  - title: "CLI"
    github: "https://github.com/maindev/testandset"
    description: "The open source CLI for TestAndSet allows you to call the TestAndSet API with an ease. It is simple in usage with all needed commands (lock, get, refresh, unlock and auto-refresh). For validating the owner of a mutex a token is used which must be provided in the refresh, auto-refresh and unlock command."

# why use TestAndSet
whyUse:
    title: "Why should you use TestAndSet?"
    intro: "Have you ever started a job to change some data which crashed because someone else was manipulating the same data at the same time? In the worst case the data has to be manually fixed to get back to the state it had before you two started your jobs. This can be a mess."
    text: "Choose an unique key for your team which is known by all people working with your mutex protected scripts. Run your script with the TestAndSet mutex lock and your scripts run one after another without conflicts. It is that simple."

# useCases
useCases:
    title: "Use cases where TestAndSet can help you:"
    list:
      - name: "Deploy software"
      - name: "Leader election"
      - name: "Write data on distributed file system"
      - name: "And many more"

# lock
mutexLock:
  enable: true
  title: "Lock"
  content: "Create your mutex with your custom key. There are some options for setting your lock with the CLI. The output can be a json-object or the pure refresh token. You can set a timeout, in which lock automatically tries to lock again at intervals. And you can also set an owner or some non-confidential data in the owner property."
  exampleCode: "$ testandset mutex lock --name $MUTEX_NAME --output [json|token] --timeout $TIMEOUT_IN_SECONDS --owner $MUTEX_OWNER_NAME"

# get
mutexGet:
  enable: true
  title: "Get"
  content: "You can check if a mutex with a specific name currently exists."
  exampleCode: "$ testandset mutex get --name $MUTEX_NAME"

# refresh
mutexRefresh:
  enable: true
  title: "Refresh"
  content: "You can refresh an existing mutex for a small amount of time. To check that you are allowed to refresh you need the token provided by the lock command."
  exampleCode: "$ testandset mutex refresh --name $MUTEX_NAME --token $TOKEN"

# unlock
mutexUnlock:
    enable: true
    title: "Unlock"
    content: "You can unlock an existing mutex to free it for other users when your work is done. To check that you are allowed to unlock you need the token provided by the lock command."
    exampleCode: "$ testandset mutex unlock --name $MUTEX_NAME --token $TOKEN"

# autorefresh
mutexAutoRefresh:
    enable: true
    title: "Auto-refresh"
    content: "You can automatically let your script refresh an existing mutex at intervals. When this command is stopped it will automatically unlock the mutex. To check that you are allowed to auto-refresh you need the token provided by the lock command."
    exampleCode: "$ testandset mutex auto-refresh --name $MUTEX_NAME --token $TOKEN"
